// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User 모델
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  phone     String?   @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // 관계
  projects Project[]
  guests   Guest[]  // 호스트가 초대한 게스트들

  @@map("users")
}

// Project 모델
model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  @db.Text
  authorId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  revisions   Revision[]
  tracks      Track[]
  invitations Invitation[]

  @@map("projects")
}

// Revision 모델
model Revision {
  id          Int      @id @default(autoincrement())
  projectId   Int
  revNo       Int      // 프로젝트별 리비전 번호 (1부터 시작)
  description String?  @db.Text // 리비전 설명 (nullable)
  status      String   @default("prepare") @db.VarChar(30) // 리비전 상태
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdTracks Track[] @relation("TrackCreatedRevision")

  // 인덱스
  @@index([projectId])
  @@unique([projectId, revNo]) // 같은 프로젝트 내에서 rev_no는 유니크해야 함
  @@map("revisions")
}

// Track 모델
model Track {
  id            Int      @id @default(autoincrement())
  name          String   @default("") @db.VarChar(100)
  projectId     Int      // 프로젝트 ID (외래키)
  createdRevNo  Int      // 생성된 리비전 번호
  createdRevId  Int      // 생성된 리비전 ID (외래키)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 관계
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdRev  Revision @relation("TrackCreatedRevision", fields: [createdRevId], references: [id], onDelete: Cascade)

  // 인덱스
  @@index([projectId])
  @@index([createdRevId])

  @@map("tracks")
}

// Guest 모델
model Guest {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  phone     String   @db.VarChar(11)
  email     String   @db.VarChar(100)
  host      Int      // 호스트 사용자 ID (외래키)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  hostUser    User          @relation(fields: [host], references: [id], onDelete: Cascade)
  invitations Invitation[]

  // 인덱스
  @@index([host])
  @@map("guests")
}

// Invitation 모델
model Invitation {
  id        Int      @id @default(autoincrement())
  projectId Int      // 프로젝트 ID (외래키)
  guestId   Int      // 게스트 ID (외래키)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  guest   Guest   @relation(fields: [guestId], references: [id], onDelete: Cascade)

  // 인덱스
  @@index([projectId])
  @@index([guestId])
  @@unique([projectId, guestId]) // 같은 프로젝트에 같은 게스트는 한 번만 초대 가능
  @@map("invitations")
}
