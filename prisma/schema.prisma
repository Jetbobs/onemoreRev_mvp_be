// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User 모델
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  phone     String?   @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // 관계
  projects Project[]
  guests   Guest[]  // 호스트가 초대한 게스트들

  @@map("users")
}

// Project 모델
model Project {
  id                   Int      @id @default(autoincrement())
  name                 String
  description          String?  @db.Text
  authorId             Int
  startDate            DateTime? // 프로젝트 시작일
  draftDeadline        DateTime? // 초안 마감일
  deadline             DateTime? // 프로젝트 마감일
  totalPrice           Int      @default(0) // 전체 가격
  originalFileProvided Boolean  @default(false) // 원본파일 제공여부
  modLimit             Int      @default(0) // 수정 횟수 제한
  additionalModFee     Int      @default(0) // 추가 수정 요금
  modCriteria          String?  @db.Text // 수정 기준
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // 관계
  author         User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  revisions      Revision[]
  tracks         Track[]
  invitations    Invitation[]
  feedbacks      Feedback[]
  payCheckPoints PayCheckPoint[]

  @@map("projects")
}

// Revision 모델
model Revision {
  id          Int      @id @default(autoincrement())
  projectId   Int
  revNo       Int      // 프로젝트별 리비전 번호 (1부터 시작)
  description String?  @db.Text // 리비전 설명 (nullable)
  status      String   @default("prepare") @db.VarChar(30) // 리비전 상태
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdTracks Track[] @relation("TrackCreatedRevision")
  files        File[]
  feedbacks    Feedback[]

  // 인덱스
  @@index([projectId])
  @@unique([projectId, revNo]) // 같은 프로젝트 내에서 rev_no는 유니크해야 함
  @@map("revisions")
}

// Track 모델
model Track {
  id            Int      @id @default(autoincrement())
  name          String   @default("") @db.VarChar(100)
  projectId     Int      // 프로젝트 ID (외래키)
  createdRevNo  Int      // 생성된 리비전 번호
  createdRevId  Int      // 생성된 리비전 ID (외래키)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 관계
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdRev  Revision @relation("TrackCreatedRevision", fields: [createdRevId], references: [id], onDelete: Cascade)
  files       File[]
  feedbacks   Feedback[]

  // 인덱스
  @@index([projectId])
  @@index([createdRevId])

  @@map("tracks")
}

// Guest 모델
model Guest {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  phone     String   @db.VarChar(11)
  email     String   @db.VarChar(100)
  host      Int      // 호스트 사용자 ID (외래키)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  hostUser    User          @relation(fields: [host], references: [id], onDelete: Cascade)
  invitations Invitation[]
  feedbacks   Feedback[]

  // 인덱스
  @@index([host])
  @@map("guests")
}

// Invitation 모델
model Invitation {
  id        Int      @id @default(autoincrement())
  projectId Int      // 프로젝트 ID (외래키)
  guestId   Int      // 게스트 ID (외래키)
  code      String?  @db.Char(16) // 초대 코드 (nullable)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  guest   Guest   @relation(fields: [guestId], references: [id], onDelete: Cascade)

  // 인덱스
  @@index([projectId])
  @@index([guestId])
  @@index([code]) // code 컬럼 인덱스
  @@unique([projectId, guestId]) // 같은 프로젝트에 같은 게스트는 한 번만 초대 가능
  @@map("invitations")
}

// File 모델
model File {
  id               Int      @id @default(autoincrement())
  revisionId       Int      // 리비전 ID (외래키)
  trackId           Int      // 트랙 ID (외래키)
  originalFilename  String   @db.VarChar(255) // 원본 파일명
  storedFilename    String   @db.VarChar(255) // 저장된 파일명 (UUID 등)
  filePath          String   @db.VarChar(500) // 파일 저장 경로
  fileSize          BigInt   // 파일 크기 (바이트)
  mimeType          String   @db.VarChar(100) // MIME 타입
  modifiedDatetime  DateTime // 파일 최종 수정일시
  uploadedAt        DateTime @default(now()) // 업로드 일시
  src               Boolean  @default(false) // 소스 파일 여부 (PSD/AI)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // 관계
  revision Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  track    Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  // 인덱스
  @@index([revisionId])
  @@index([trackId])
  @@index([src])
  @@map("files")
}

// Feedback 모델
model Feedback {
  id         Int     @id @default(autoincrement())
  author     Int     // 작성자 ID (외래키 -> guests.id)
  projectId  Int     // 프로젝트 ID (외래키)
  revisionId Int     // 리비전 ID (외래키)
  trackId    Int     // 트랙 ID (외래키)
  normalX    Float   // 정규화된 X 좌표
  normalY    Float   // 정규화된 Y 좌표
  content    String  @db.Text // 피드백 내용
  reply      String? @db.Text // 답변 내용 (nullable)
  solved     Boolean @default(false) // 해결 여부
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 관계
  authorGuest Guest    @relation(fields: [author], references: [id], onDelete: Cascade)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  revision    Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  track       Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  // 인덱스
  @@index([author])
  @@index([projectId])
  @@index([revisionId])
  @@index([trackId])
  @@index([solved])
  @@map("feedbacks")
}

// PayCheckPoint 모델
model PayCheckPoint {
  id        Int      @id @default(autoincrement())
  projectId Int
  payDate   DateTime // 지급일
  price     Int      // 금액
  label     String   @db.VarChar(50) // 라벨
  paidAmount Int     @default(0) // 실제 지급액수
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // 인덱스
  @@index([projectId])
  @@map("paycheckpoints")
}
